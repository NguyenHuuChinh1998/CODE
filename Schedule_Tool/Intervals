let
    Source = SharePoint.Files("https://cnxmail-my.sharepoint.com/personal/thinhuthao_phan_concentrix_com", [ApiVersion = 15]),
    #"Filtered Hidden Files1" = Table.SelectRows(Source, each ([Folder Path] = "https://cnxmail-my.sharepoint.com/personal/thinhuthao_phan_concentrix_com/Documents/Expedia_VN_RTAs (shared drive)/EXPEDIA VN REPORT/Schedule/IEX/")),
    #"Filtered Hidden Files2" = Table.SelectRows(#"Filtered Hidden Files1", each [Attributes]?[Hidden]? <> true),
    #"Invoke Custom Function1" = Table.AddColumn(#"Filtered Hidden Files2", "Transform File (2)", each #"Transform File (2)"([Content])),
    #"Renamed Columns1" = Table.RenameColumns(#"Invoke Custom Function1", {"Name", "Source.Name"}),
    #"Removed Other Columns1" = Table.SelectColumns(#"Renamed Columns1", {"Source.Name", "Transform File (2)"}),
    #"Expanded Table Column1" = Table.ExpandTableColumn(#"Removed Other Columns1", "Transform File (2)", Table.ColumnNames(#"Transform File (2)"(#"Sample File (2)"))),

    SkippedRows = Table.Skip(#"Expanded Table Column1", 6),
    RenamedColumns2 = Table.RenameColumns(SkippedRows,{{"Column2", "Agent"}, {"Column3", "Date"}, {"Column4", "Start_Shift"}, {"Column5", "End_Shift"}, {"Column7", "Scheduled Activity"}, {"Column8", "Start_Action"}, {"Column11", "End_Action"}}),
    #"Removed Columns2" = Table.RemoveColumns(RenamedColumns2,{"Source.Name", "Column1", "Column9", "Column10", "Column12", "Column13", "Column6"}),
    FilledDownAgent = Table.FillDown(#"Removed Columns2", {"Agent"}),
    RemoveOff = Table.SelectRows(FilledDownAgent, each ([Start_Shift] <> "Off")),
    FilteredDate = Table.SelectRows(RemoveOff, each ([Date] <> "Date")),
    FilledDownColumns = Table.FillDown(FilteredDate, {"Date", "Start_Shift", "End_Shift"}),

    OffTable = Table.SelectRows(FilledDownAgent, each ([Start_Shift] = "Off")),
    combinedOffTable = Table.Combine({FilledDownColumns, OffTable}),

    ChangedDateType = Table.TransformColumnTypes(combinedOffTable,{{"Date", type date}}),
    ReplacedOff = Table.ReplaceValue(ChangedDateType, "End", "Off", Replacer.ReplaceText, {"End_Shift"}),
    ReplacedNulls = Table.TransformColumns(ReplacedOff, {
        {"Scheduled Activity", each if _ = null then "---" else _, type text},
        {"Start_Action", each if _ = null then "---" else _, type text},
        {"End_Action", each if _ = null then "---" else _, type text}
    }),

    RemovedFilteredRows = Table.SelectRows(ReplacedNulls, each ([Start_Shift] = "Off" and [Scheduled Activity] = "---") or ([Start_Shift] <> null and [Scheduled Activity] <> "---")),
    AddedIDColumn = Table.AddColumn(RemovedFilteredRows, "ID", each Text.BeforeDelimiter(Text.AfterDelimiter([Agent], "Agent: "), " "), type text),
    AddedAgentNameColumn = Table.AddColumn(AddedIDColumn, "Agent Name", each Text.Upper(Text.AfterDelimiter([Agent], " ")), type text),
    AdjustedAgentNameColumn = Table.TransformColumns(AddedAgentNameColumn, {"Agent Name", each Text.AfterDelimiter(_, " "), type text}),
    FilteredInvalidValues = Table.SelectRows(AdjustedAgentNameColumn, each ([Agent] <> "Activity code description: Description" and [Agent] <> "Activity code icon: Standard" and [Agent] <> "Generation Date: 12/20/23 7:09 AM" and [Agent] <> "New page after each agent: No" and [Agent] <> "NICE Workforce Management" and [Agent] <> "Report By: Agent" and [Agent] <> "Report Parameters" and [Agent] <> "Sort: Agent Name Asc")),
    AdjustedEndShift = Table.ReplaceValue(FilteredInvalidValues, each [End_Shift], each if [Start_Shift] = "Off" then "Off" else [End_Shift], Replacer.ReplaceValue, {"Start_Shift", "End_Shift"}),
    ChangedTimeType = Table.TransformColumnTypes(AdjustedEndShift,{{"Start_Action", type time}, {"End_Action", type time}}),
    RemovedUnusedColumns = Table.RemoveColumns(ChangedTimeType,{"Agent"}),
    ChangedType = Table.TransformColumnTypes(RemovedUnusedColumns,{{"Start_Shift", type time}, {"End_Shift", type time}}),
    
    AddStartShiftMinutes = Table.AddColumn(ChangedType, "Start_Shift_Minutes", each Time.Hour([Start_Shift]) * 60 + Time.Minute([Start_Shift]), type number),
    AddEndShiftMinutes = Table.AddColumn(AddStartShiftMinutes, "End_Shift_Minutes", each Time.Hour([End_Shift]) * 60 + Time.Minute([End_Shift]), type number),
    AddStartActionMinutes = Table.AddColumn(AddEndShiftMinutes, "Start_Action_Minutes", each Time.Hour([Start_Action]) * 60 + Time.Minute([Start_Action])),
    AddEndActionMinutes = Table.AddColumn(AddStartActionMinutes, "End_Action_Minutes", each Time.Hour([End_Action]) * 60 + Time.Minute([End_Action])),
    Changed_Value_Of_Endshift = Table.ReplaceValue(
        AddEndActionMinutes,
                each if [Start_Shift_Minutes] <> 0 then 0 else null,
                1440,
                Replacer.ReplaceValue,
                {"End_Shift_Minutes"}
            ),
    Changed_Value_Of_EndshiftActionMinutes = Table.AddColumn(
        Changed_Value_Of_Endshift,
        "New_End_Action_Minutes",
        each if [End_Action_Minutes] < [Start_Action_Minutes] then [End_Action_Minutes] + 1440 else [End_Action_Minutes], type number
    ),
    Changed_Value_Of_EndshiftMinutes = Table.AddColumn(
        Changed_Value_Of_EndshiftActionMinutes,
        "New_End_Shift_Minutes",
        each if [End_Shift_Minutes] < [Start_Shift_Minutes] then [End_Shift_Minutes] + 1440 else [End_Shift_Minutes], type number
    ),
    Removed_Columns1 = Table.RemoveColumns(Changed_Value_Of_EndshiftMinutes,{"End_Shift_Minutes","End_Action_Minutes"}),
    Renamed_Columns1 = Table.RenameColumns(Removed_Columns1,{{"New_End_Action_Minutes", "End_Action_Minutes"},{"New_End_Shift_Minutes","End_Shift_Minutes"}}),
    
    offShiftTable  = Table.SelectRows(RemovedUnusedColumns, each ([Scheduled Activity] = "---")),
    updatedOffShiftTable = Table.TransformColumns(offShiftTable, {
        {"Start_Shift", each "Off"}, {"End_Shift", each "Off"},
        {"Scheduled Activity", each "Off"},
        {"Start_Action", each "Off"}, {"End_Action", each "Off"}
    }),
    offTable_removeduplicate = Table.Distinct(updatedOffShiftTable, {"Date", "ID"}),
    offTable_changed_id_type = Table.TransformColumnTypes(offTable_removeduplicate,{{"ID", type number}, {"Start_Action", type text}, {"End_Action", type text}}),
    offTable_Filtered_Rows = Table.SelectRows(offTable_changed_id_type, each ([ID] <> null)),
    offtable = offTable_Filtered_Rows,

    Changed_Number = Table.TransformColumnTypes(Renamed_Columns1,{{"Start_Shift_Minutes", type number}, {"End_Shift_Minutes", type number}, {"Start_Action_Minutes", type number}, {"End_Action_Minutes", type number}}),
    Remove_off = Table.SelectRows(Changed_Number, each ([Scheduled Activity] <> "---")),
    #"Renamed Columns" = Table.RenameColumns(Remove_off,{{"Start_Action", "Time_Start_Time"}, {"End_Action", "Time_End_Time"}}),
    Added_Start_Date = Table.AddColumn(#"Renamed Columns", "Day_Start_Time", 
        each if [Time_Start_Time] = null then null
        else if [Time_Start_Time] <> null then if [Time_Start_Time] < [Start_Shift] then Date.AddDays([Date], 1)
        else [Date] else null, type date),
    Added_End_Date = Table.AddColumn(Added_Start_Date, "Day_End_Time", 
        each if [Time_End_Time] = null then null 
        else if [Time_End_Time] <> null then if [Time_End_Time] <= [Start_Shift] then Date.AddDays([Date], 1)
        else [Date] else null, type date),
    AddStartTimeHour = Table.AddColumn(
        Added_End_Date, 
        "Start_Time_Hours", 
        each (Time.Hour([Time_Start_Time]) + Time.Minute([Time_Start_Time]) / 60 + Time.Second([Time_Start_Time])/ 3600) , 
        type number),
 
    AddEndTimeHour = Table.AddColumn(
        AddStartTimeHour, 
        "End_Time_Hours", 
        each 
            let
                endHours = Time.Hour([Time_End_Time]) + Time.Minute([Time_End_Time]) / 60 + Time.Second([Time_End_Time]) / 3600,
                adjustedEndHours = if [Day_End_Time] > [Day_Start_Time] then endHours + 24 else endHours
            in
                adjustedEndHours, 
        type number),
    AddStartTimeHalfRounding = Table.AddColumn(
        AddEndTimeHour, 
        "Start_Time_Half_Rounding", 
        each 
            if Number.RoundUp([Start_Time_Hours] * 2) / 2 = [Start_Time_Hours]
            then [Start_Time_Hours]
            else Number.RoundDown([Start_Time_Hours] * 2) / 2,
        type number
    ),
    AddEndTimeHalfRounding = Table.AddColumn(
        AddStartTimeHalfRounding, 
        "End_Time_Half_Rounding", 
        each 
            if Number.RoundDown([End_Time_Hours] * 2) / 2 = [End_Time_Hours]
            then [End_Time_Hours]
            else Number.RoundUp([End_Time_Hours] * 2) / 2,
        type number
    ),
    AddNumberSplit = Table.AddColumn(
        AddEndTimeHalfRounding, 
        "Number_Split", 
        each 
            if 
                [End_Time_Half_Rounding] <> null and [Start_Time_Half_Rounding] <> null
            then 
                ([End_Time_Half_Rounding] - [Start_Time_Half_Rounding]) * 2
            else 
                null,
        type number
    ),
    #"Renamed Columns2" = Table.RenameColumns(AddNumberSplit,{{"Start_Time_Half_Rounding", "Time_1"}}),
    #"Added Custom4" = Table.AddColumn(
        #"Renamed Columns2",
            "Time_2",
            each [Time_1] + 0.5,
            type number
    ),
    #"Duplicated Rows" = Table.DuplicateColumn(#"Added Custom4", "Number_Split", "Duplicated"),
    #"Added Custom5" = Table.AddColumn(#"Duplicated Rows", "Custom", each List.Numbers(0, [Number_Split])),
    #"Expanded Custom" = Table.ExpandListColumn(#"Added Custom5", "Custom"),
    #"Added Custom6" = Table.AddColumn(#"Expanded Custom", "Time_1_New", each [Time_1] + ([Custom] * 0.5), type number),
    #"Added Custom7" = Table.AddColumn(#"Added Custom6", "Time_2_New", each [Time_2] + ([Custom] * 0.5), type number),
    #"Rounded End_Time_Hours" = Table.AddColumn(#"Added Custom7", "Rounded_End_Time_Hours", each Number.RoundUp([End_Time_Hours] * 2) / 2),
    #"Filtered_Rows" = Table.SelectRows(#"Rounded End_Time_Hours", each [Rounded_End_Time_Hours] > [Time_1_New]),
    #"Added Start_Time_Number" = Table.AddColumn(
        Filtered_Rows,
        "Start_Time_Number",
        each if [Time_1_New] > [Start_Time_Hours] then [Time_1_New] else [Start_Time_Hours]
    ),
    #"Added End_Time_Number" = Table.AddColumn(
        #"Added Start_Time_Number",
        "End_Time_Number",
        each if [Time_2_New] < [End_Time_Hours] then [Time_2_New] else [End_Time_Hours]
    ),
    #"Added Day_Start_Time" = Table.AddColumn(
        #"Added End_Time_Number",
        "New_Day_Start_Time",
        each let
            calculatedValue = [Start_Time_Number]
        in
            if [Day_Start_Time] = [Day_End_Time] then [Day_Start_Time] else
                if calculatedValue >= 24 then Date.AddDays([Day_Start_Time], 1) else [Day_Start_Time], type date
    ),
    #"Added Day_End_Time" = Table.AddColumn(
        #"Added Day_Start_Time",
        "New_Day_End_Time",
        each let
            calculatedValue = [End_Time_Number]
        in
            if [Day_Start_Time] = [Day_End_Time] then [Day_End_Time] else
                if calculatedValue < 24 then Date.AddDays([Day_End_Time], -1) else [Day_End_Time], type date
    ),
    #"Adjusted Columns" = Table.TransformColumns(
        #"Added Day_End_Time",
        {
            {"Start_Time_Number", each Number.Mod(if _ > 24 then _ - 24 else _, 24), Int64.Type},
            {"End_Time_Number", each Number.Mod(if _ >= 24 then _ - 24 else _, 24), Int64.Type}
        }
    ),
    #"Converted to Time" = Table.TransformColumns(
        #"Adjusted Columns",
        {
            {"Start_Time_Number", each 
                let
                    hours = Number.RoundDown(_),
                    remainingMinutes = (_ - hours) * 60,
                    minutes = Number.RoundDown(remainingMinutes),
                    secondsRaw = (_ - hours - minutes / 60) * 3600,
                    seconds = Number.RoundDown(secondsRaw),
                    timeText = Text.From(hours) & ":" & Text.From(minutes) & ":" & Text.From(seconds)
                in
                    Time.FromText(timeText), 
                type time
            },
 
            {"End_Time_Number", each 
                let
                    hours = Number.RoundDown(_),
                    minutes = Number.RoundDown((_ - hours) * 60),
                    secondsRaw = (_ - hours - minutes / 60) * 3600,
                    seconds = Number.RoundDown(secondsRaw),
                    timeText = Text.From(hours) & ":" & Text.From(minutes) & ":" & Text.From(seconds)
                in
                    Time.FromText(timeText), 
                type time
            }
        }
    ),
    #"Extended Start Times" = Table.AddColumn(
    #"Converted to Time", 
        "Extend_Start_Time", 
        each DateTime.FromText(Text.From([Start_Time_Number]) & " " & Text.From([New_Day_Start_Time]))
            + #duration(0, 0, 0, Time.Second([Start_Time_Number])),
        type datetime
    ),
    #"Extended End Times" = Table.AddColumn(
        #"Extended Start Times", 
        "Extend_End_Time", 
        each DateTime.FromText(Text.From([End_Time_Number]) & " " & Text.From([New_Day_End_Time]))
            + #duration(0, 0, 0, Time.Second([End_Time_Number])), 
        type datetime),
    #"Added Duration Column" = Table.AddColumn(
        #"Extended End Times", 
        "Duration", 
        each Duration.TotalSeconds([Extend_End_Time] - [Extend_Start_Time]),
        type number
    ),
 
    #"Removed Other Columns2" = Table.SelectColumns(#"Added Duration Column",{"Date", "Start_Shift", "End_Shift", "Scheduled Activity", "Time_Start_Time", "Time_End_Time", "ID", "Time_1_New", "Extend_Start_Time", "Extend_End_Time", "Duration"}),
    #"Renamed Columns3" = Table.RenameColumns(#"Removed Other Columns2",{{"Time_1_New", "Intervals"}, {"Date", "Converted Date"}}),
    Added_Date = Table.AddColumn(#"Renamed Columns3","Date", each Date.From([Extend_Start_Time]), type date),
    #"Adjusted_Slot_Columns" = Table.TransformColumns(
        Added_Date,
        {
            {"Intervals", each Number.Mod(if _ > 24 then _ - 24 else _, 24), Int64.Type}
        }
    ),
    Changed_Slot = Table.TransformColumnTypes(Adjusted_Slot_Columns,{{"Intervals", type text}}),
    Converted_Slot_to_Time = Table.TransformColumns(
        Changed_Slot,
        {
            {"Intervals", each Time.From(DateTime.From(Number.RoundDown(Number.FromText(_) * 3600, 0) / 86400))}
        }
    ),
    #"Changed Type1" = Table.TransformColumnTypes(Converted_Slot_to_Time,{{"Intervals", type time}, {"ID", type number}}),
    Added_Productive = Table.AddColumn(#"Changed Type1", "Productive", 
        each if [Scheduled Activity] = "Open Time" or [Scheduled Activity] = "Extra Hours" then [Duration] / 3600 else null, type number),
    Added_UnProductive = Table.AddColumn( Added_Productive, "UnProductive",
        each if [Scheduled Activity] = "Break" or [Scheduled Activity] = "Lunch" or Text.Contains([Scheduled Activity], "Training") then [Duration] / 3600 else null, type number),
    Added_HC_Open = Table.AddColumn(Added_UnProductive, "HC Open", each [Productive] * 2, type number),
    Added_HC_Close = Table.AddColumn(Added_HC_Open, "HC Close", each [UnProductive] * 2, type number),
    Merged_HC = Table.NestedJoin(Added_HC_Close, {"Date","ID"},HC_Extend, {"Date","IEX ID"},"HC",JoinKind.LeftOuter),
    #"Expanded HC" = Table.ExpandTableColumn(Merged_HC, "HC", {"Week Begin", "Employee Name", "Alias Name", "LOB", "Supervisor Name", "Email Id", "Wave", "Status", "LOB_2"}, {"Week Begin", "Employee Name", "Alias Name", "LOB", "Supervisor Name", "Email Id", "Wave", "Status", "LOB_2"}),
    Added_Shift_Column = Table.AddColumn(
        #"Expanded HC",
        "Shift",
        each 
            let 
                startShift = [Start_Shift],
                endShift = [End_Shift],
                startShiftText = 
                    if startShift <> null and startShift <> "Off" then
                        let 
                            startShiftTime = Time.From(startShift),
                            startHour = Time.Hour(startShiftTime),
                            startMinute = Time.Minute(startShiftTime)
                        in
                            Text.PadStart(Text.From(startHour), 2, "0") & Text.PadStart(Text.From(startMinute), 2, "0")
                    else
                        "Off",
                endShiftText = 
                    if endShift <> null and endShift <> "Off" then
                        let 
                            endShiftTime = Time.From(endShift),
                            endHour = Time.Hour(endShiftTime),
                            endMinute = Time.Minute(endShiftTime)
                        in
                            Text.PadStart(Text.From(endHour), 2, "0") & Text.PadStart(Text.From(endMinute), 2, "0")
                    else
                        "Off"
            in
                if startShift <> null and startShift <> "Off" then
                    startShiftText & "-" & endShiftText
                else
                    startShiftText,
        type text
    ),
    Added_PST_Datetime = Table.AddColumn(Added_Shift_Column, "PST_Datetime", each [Extend_Start_Time] - #duration(0, 14, 0, 0), type datetime),
    Added_PST_Date = Table.AddColumn(Added_PST_Datetime, "PST_Date", each Date.From([PST_Datetime]), type date),
    #"Reordered Columns" = Table.ReorderColumns(Added_PST_Date,{"Week Begin", "Converted Date", "Date", "Employee Name", "Email Id", "Alias Name", "LOB_2","LOB", "Supervisor Name", "Wave", "Status", "Start_Shift", "End_Shift", "Shift", "Intervals", "Scheduled Activity", "ID", "Time_Start_Time", "Time_End_Time", "Extend_Start_Time", "Extend_End_Time", "Duration", "Productive", "UnProductive", "HC Open", "HC Close"})
in
    #"Reordered Columns"
