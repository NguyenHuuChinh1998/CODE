let
    Source = SharePoint.Files("https://cnxmail-my.sharepoint.com/personal/thinhuthao_phan_concentrix_com", [ApiVersion = 15]),
    #"Filtered Hidden Files1" = Table.SelectRows(Source, each ([Folder Path] = "https://cnxmail-my.sharepoint.com/personal/thinhuthao_phan_concentrix_com/Documents/Expedia_VN_RTAs (shared drive)/EXPEDIA VN REPORT/Schedule/IEX/")),
    #"Filtered Hidden Files2" = Table.SelectRows(#"Filtered Hidden Files1", each [Attributes]?[Hidden]? <> true),
    #"Invoke Custom Function1" = Table.AddColumn(#"Filtered Hidden Files2", "Transform File (2)", each #"Transform File (2)"([Content])),
    #"Renamed Columns1" = Table.RenameColumns(#"Invoke Custom Function1", {"Name", "Source.Name"}),
    #"Removed Other Columns1" = Table.SelectColumns(#"Renamed Columns1", {"Source.Name", "Transform File (2)"}),
    #"Expanded Table Column1" = Table.ExpandTableColumn(#"Removed Other Columns1", "Transform File (2)", Table.ColumnNames(#"Transform File (2)"(#"Sample File (2)"))),

    SkippedRows = Table.Skip(#"Expanded Table Column1", 6),
    RenamedColumns2 = Table.RenameColumns(SkippedRows,{{"Column2", "Agent"}, {"Column3", "Date"}, {"Column4", "Start_Shift"}, {"Column5", "End_Shift"}, {"Column7", "Scheduled Activity"}, {"Column8", "Start_Action"}, {"Column11", "End_Action"}}),
    #"Removed Columns2" = Table.RemoveColumns(RenamedColumns2,{"Source.Name", "Column1", "Column9", "Column10", "Column12", "Column13", "Column6"}),
    FilledDownAgent = Table.FillDown(#"Removed Columns2", {"Agent"}),
    RemoveOff = Table.SelectRows(FilledDownAgent, each ([Start_Shift] <> "Off")),
    FilteredDate = Table.SelectRows(RemoveOff, each ([Date] <> "Date")),
    FilledDownColumns = Table.FillDown(FilteredDate, {"Date", "Start_Shift", "End_Shift"}),

    OffTable = Table.SelectRows(FilledDownAgent, each ([Start_Shift] = "Off")),
    combinedOffTable = Table.Combine({FilledDownColumns, OffTable}),

    ChangedDateType = Table.TransformColumnTypes(combinedOffTable,{{"Date", type date}}),
    ReplacedOff = Table.ReplaceValue(ChangedDateType, "End", "Off", Replacer.ReplaceText, {"End_Shift"}),
    ReplacedNulls = Table.TransformColumns(ReplacedOff, {
        {"Scheduled Activity", each if _ = null then "---" else _, type text},
        {"Start_Action", each if _ = null then "---" else _, type text},
        {"End_Action", each if _ = null then "---" else _, type text}
    }),

    RemovedFilteredRows = Table.SelectRows(ReplacedNulls, each ([Start_Shift] = "Off" and [Scheduled Activity] = "---") or ([Start_Shift] <> null and [Scheduled Activity] <> "---")),
    AddedIDColumn = Table.AddColumn(RemovedFilteredRows, "ID", each Text.BeforeDelimiter(Text.AfterDelimiter([Agent], "Agent: "), " "), type text),
    AddedAgentNameColumn = Table.AddColumn(AddedIDColumn, "Agent Name", each Text.Upper(Text.AfterDelimiter([Agent], " ")), type text),
    AdjustedAgentNameColumn = Table.TransformColumns(AddedAgentNameColumn, {"Agent Name", each Text.AfterDelimiter(_, " "), type text}),
    FilteredInvalidValues = Table.SelectRows(AdjustedAgentNameColumn, each ([Agent] <> "Activity code description: Description" and [Agent] <> "Activity code icon: Standard" and [Agent] <> "Generation Date: 12/20/23 7:09 AM" and [Agent] <> "New page after each agent: No" and [Agent] <> "NICE Workforce Management" and [Agent] <> "Report By: Agent" and [Agent] <> "Report Parameters" and [Agent] <> "Sort: Agent Name Asc")),
    AdjustedEndShift = Table.ReplaceValue(FilteredInvalidValues, each [End_Shift], each if [Start_Shift] = "Off" then "Off" else [End_Shift], Replacer.ReplaceValue, {"Start_Shift", "End_Shift"}),
    ChangedTimeType = Table.TransformColumnTypes(AdjustedEndShift,{{"Start_Action", type time}, {"End_Action", type time}}),
    ExtractHour = Table.AddColumn(ChangedTimeType, "Slot", each 
        let
            hour = Time.Hour([Start_Action]),
            minute = Time.Minute([Start_Action]),
            slotMinute = if minute >= 30 then "30" else "00"
        in
            Text.From(hour) & ":" & slotMinute
    ),
    RemovedUnusedColumns = Table.RemoveColumns(ExtractHour,{"Agent"}),
    ChangedType = Table.TransformColumnTypes(RemovedUnusedColumns,{{"Start_Shift", type time}, {"End_Shift", type time}}),
    
    AddStartShiftMinutes = Table.AddColumn(ChangedType, "Start_Shift_Minutes", each Time.Hour([Start_Shift]) * 60 + Time.Minute([Start_Shift]), type number),
    AddEndShiftMinutes = Table.AddColumn(AddStartShiftMinutes, "End_Shift_Minutes", each Time.Hour([End_Shift]) * 60 + Time.Minute([End_Shift]), type number),
    AddStartActionMinutes = Table.AddColumn(AddEndShiftMinutes, "Start_Action_Minutes", each Time.Hour([Start_Action]) * 60 + Time.Minute([Start_Action])),
    AddEndActionMinutes = Table.AddColumn(AddStartActionMinutes, "End_Action_Minutes", each Time.Hour([End_Action]) * 60 + Time.Minute([End_Action])),
    Changed_Value_Of_Endshift = Table.ReplaceValue(
        AddEndActionMinutes,
                each if [Start_Shift_Minutes] <> 0 then 0 else null,
                1440,
                Replacer.ReplaceValue,
                {"End_Shift_Minutes"}
            ),
    Changed_Value_Of_EndshiftActionMinutes = Table.AddColumn(
        Changed_Value_Of_Endshift,
        "New_End_Action_Minutes",
        each if [End_Action_Minutes] < [Start_Action_Minutes] then [End_Action_Minutes] + 1440 else [End_Action_Minutes], type number
    ),
    Changed_Value_Of_EndshiftMinutes = Table.AddColumn(
        Changed_Value_Of_EndshiftActionMinutes,
        "New_End_Shift_Minutes",
        each if [End_Shift_Minutes] < [Start_Shift_Minutes] then [End_Shift_Minutes] + 1440 else [End_Shift_Minutes], type number
    ),
    Removed_Columns1 = Table.RemoveColumns(Changed_Value_Of_EndshiftMinutes,{"End_Shift_Minutes","End_Action_Minutes"}),
    Renamed_Columns1 = Table.RenameColumns(Removed_Columns1,{{"New_End_Action_Minutes", "End_Action_Minutes"},{"New_End_Shift_Minutes","End_Shift_Minutes"}}),
    
    offShiftTable  = Table.SelectRows(RemovedUnusedColumns, each ([Scheduled Activity] = "---")),
    updatedOffShiftTable = Table.TransformColumns(offShiftTable, {
        {"Start_Shift", each null}, {"End_Shift", each null},
        {"Scheduled Activity", each "Off"},
        {"Start_Action", each null}, {"End_Action", each null},{"Slot", each null}
    }),
    offTable_removeduplicate = Table.Distinct(updatedOffShiftTable, {"Date", "ID"}),
    offTable_changed_id_type = Table.TransformColumnTypes(offTable_removeduplicate,{{"ID", type number}, {"Start_Action", type text}, {"End_Action", type text}}),
    offTable_Filtered_Rows = Table.SelectRows(offTable_changed_id_type, each ([ID] <> null)),
    offtable = offTable_Filtered_Rows,

    Changed_Number = Table.TransformColumnTypes(Renamed_Columns1,{{"Start_Shift_Minutes", type number}, {"End_Shift_Minutes", type number}, {"Start_Action_Minutes", type number}, {"End_Action_Minutes", type number}}),
    Remove_off = Table.SelectRows(Changed_Number, each ([Scheduled Activity] <> "---")),

    GroupedRows = Table.Group(Remove_off, {"ID","Agent Name", "Date", "Start_Shift", "End_Shift", "Scheduled Activity"}, {{"Count", each Table.AddIndexColumn(_, "Index", 1, 1), type table}}),
    ExpandedTable = Table.ExpandTableColumn(GroupedRows, "Count", {"Index", "Start_Action", "End_Action","Start_Shift_Minutes","Start_Action_Minutes","End_Action_Minutes","End_Shift_Minutes","Slot"}, {"Index", "Start_Action", "End_Action","Start_Shift_Minutes","Start_Action_Minutes","End_Action_Minutes","End_Shift_Minutes","Slot"}),
    #"Removed Duplicates" = Table.Distinct(ExpandedTable, {"ID", "Date", "Scheduled Activity", "Start_Action", "End_Action"}),
    AddedPrefixedActivity = Table.AddColumn(#"Removed Duplicates", "Prefixed Activity", each [Scheduled Activity] & "_" & Text.From([Index])),
    RemovedIndexColumn = Table.RemoveColumns(AddedPrefixedActivity,{"Index"}),
    ChangedType2 = Table.TransformColumnTypes(RemovedIndexColumn,{{"Start_Action", type time}, {"End_Action", type time}, {"Slot", type text}}),
    Replaced_Value_2 = Table.ReplaceValue(ChangedType2,"Lunch_1","Lunch",Replacer.ReplaceText,{"Prefixed Activity"}),
    Replaced_Value_3 = Table.ReplaceValue(Replaced_Value_2,"Holiday_1","Holiday",Replacer.ReplaceText,{"Prefixed Activity"}),
    Replaced_Value_4 = Table.ReplaceValue(Replaced_Value_3,"Holiday_2","Holiday",Replacer.ReplaceText,{"Prefixed Activity"}),
    #"Reordered Columns" = Table.ReorderColumns(Replaced_Value_4,{"ID", "Date", "Start_Shift", "End_Shift", "Scheduled Activity", "Start_Action", "End_Action", "Slot"}),
    #"Changed Type" = Table.TransformColumnTypes(#"Reordered Columns",{{"ID", type number}}),
    AddBreak1Minutes = Table.AddColumn(#"Changed Type", "Break_1", each if [Scheduled Activity] = "Break_1" then Time.Hour([Start_Action]) * 60 + Time.Minute([Start_Action]) else "-", type number),
    AddBreak2Minutes = Table.AddColumn(AddBreak1Minutes, "Break_2", each if [Scheduled Activity] = "Break_2" then Time.Hour([Start_Action]) * 60 + Time.Minute([Start_Action]) else "-", type number),
    AddLunchMinutes = Table.AddColumn(AddBreak2Minutes, "Lunch", each if [Scheduled Activity] = "Lunch" then Time.Hour([Start_Action]) * 60 + Time.Minute([Start_Action]) else "-", type number),
    Changed_Date_To_Text = Table.TransformColumnTypes(AddLunchMinutes,{{"Start_Shift", type text}, {"End_Shift", type text}, {"Start_Action", type text}, {"End_Action", type text}}),
    Start_Shift_Holiday = Table.AddColumn(Changed_Date_To_Text, "Adjusted Start_Shift", each if [Scheduled Activity] = "Holiday" then null else [Start_Shift], type nullable text),
    End_Shift_Holiday = Table.AddColumn(Start_Shift_Holiday, "Adjusted End_Shift", each if [Scheduled Activity] = "Holiday" then null else [End_Shift], type nullable text),
    Removed_Start_End_Shift = Table.RemoveColumns(End_Shift_Holiday,{"Start_Shift", "End_Shift"}),
    Rename_Start_End_Shift = Table.RenameColumns(Removed_Start_End_Shift,{{"Adjusted Start_Shift", "Start_Shift"}, {"Adjusted End_Shift", "End_Shift"}}),
    #"Reordered Columns1" = Table.ReorderColumns(Rename_Start_End_Shift,{"ID", "Date", "Start_Shift", "End_Shift", "Scheduled Activity", "Start_Action", "Start_Shift_Minutes", "Start_Action_Minutes", "End_Action_Minutes", "End_Shift_Minutes", "End_Action", "Slot", "Break_1", "Break_2", "Lunch"}),
    Main_Table = #"Reordered Columns1",

    ConvertToTime = (value) =>
        if value = "Off" then "Off" else Time.FromText(value),
    combinedTable = Table.Combine({offtable, Main_Table}),
    convertedTable = Table.TransformColumns(combinedTable, {
        {"Start_Shift", each ConvertToTime(_), type time},
        {"End_Shift", each ConvertToTime(_), type time},
        {"Start_Action", each ConvertToTime(_), type time},
        {"End_Action", each ConvertToTime(_), type time},
        {"Slot", each ConvertToTime(_), type time}
    }),
    Reordered_Columns1 = Table.ReorderColumns(convertedTable,{"ID", "Agent Name", "Date", "Start_Shift", "End_Shift", "Scheduled Activity", "Start_Action", "End_Action", "Slot", "Start_Shift_Minutes", "End_Shift_Minutes", "Start_Action_Minutes", "End_Action_Minutes", "Break_1", "Break_2", "Lunch"}),
    Sorted_Date = Table.Sort(Reordered_Columns1,{{"Date", Order.Ascending}}),
    #"Removed Other Columns" = Table.SelectColumns(Sorted_Date,{"ID", "Date", "Start_Shift", "End_Shift", "Scheduled Activity", "Start_Action", "End_Action", "Slot", "Prefixed Activity"}),
    Merged_HC_Extend = Table.NestedJoin(#"Removed Other Columns", {"Date","ID"}, HC_Extend, {"Date","IEX ID"}, "HC_Extend", JoinKind.LeftOuter),
    #"Expanded HC_Extend" = Table.ExpandTableColumn(Merged_HC_Extend, "HC_Extend", {"Year", "Month", "Week Begin", "Date Start Month", "Date End Month", "Date Start Week", "Date End Week", "Week", "Day", "OracleID", "People ID", "IEX ID", "Employee Name", "Alias Name", "Designation", "LOB", "Supervisor Name", "Email Id", "Wave", "Detail Status", "Tenure", "LOB_2"}, {"Year", "Month", "Week Begin", "Date Start Month", "Date End Month", "Date Start Week", "Date End Week", "Week", "Day", "OracleID", "People ID", "IEX ID", "Employee Name", "Alias Name", "Designation", "LOB", "Supervisor Name", "Email Id", "Wave", "Detail Status", "Tenure", "LOB_2"}),
    Added_Datetime_Start_Shift = Table.AddColumn(
        #"Expanded HC_Extend", 
            "Datetime_Start_Shift", 
            each if [Start_Shift] = null or [Start_Shift] = "Off" then null else DateTime.FromText(Text.From([Start_Shift]) & " " & Text.From([Date]))
                + #duration(0, 0, 0, Time.Second([Start_Shift])),
            type datetime),
    Added_Datetime_End_Shift = Table.AddColumn(
        Added_Datetime_Start_Shift,
        "Datetime_End_Shift",
        each let
            endShiftTime = [End_Shift],
            startShiftTime = [Start_Shift],
            currentDate = Text.From([Date]),  // Convert Date to Text explicitly
            endShiftDateTime =
                if startShiftTime = null or startShiftTime = "Off" then
                    null
                else if endShiftTime < startShiftTime then
                    DateTime.From(currentDate & " " & Text.From(endShiftTime)) + #duration(1, 0, 0, 0)
                else
                    DateTime.From(currentDate & " " & Text.From(endShiftTime))
        in
            endShiftDateTime,
        type datetime
    ),
    Added_Datetime_Start_Action = Table.AddColumn(
        Added_Datetime_End_Shift,
        "Datetime_Start_Action",
        each let
            startActionTime = [Start_Action],
            startShiftTime = [Start_Shift],
            currentDate = Text.From([Date]),  // Convert Date to Text explicitly
            startActionDateTime =
                if startShiftTime = null or startShiftTime = "Off" then
                    null
                else if startActionTime < startShiftTime then
                    DateTime.From(currentDate & " " & Text.From(startActionTime)) + #duration(1, 0, 0, 0)
                else
                    DateTime.From(currentDate & " " & Text.From(startActionTime))
        in
            startActionDateTime,
        type datetime
    ),
    Added_Datetime_End_Action = Table.AddColumn(
        Added_Datetime_Start_Action,
        "Datetime_End_Action",
        each let
            endActionTime = [End_Action],
            startShiftTime = [Start_Shift],
            currentDate = Text.From([Date]),  // Convert Date to Text explicitly
            endActionDateTime =
                if startShiftTime = null or startShiftTime = "Off" then
                    null
                else if endActionTime < startShiftTime then
                    DateTime.From(currentDate & " " & Text.From(endActionTime)) + #duration(1, 0, 0, 0)
                else
                    DateTime.From(currentDate & " " & Text.From(endActionTime))
        in
            endActionDateTime,
        type datetime
    ),

    Removed_Break_Lunch = Table.SelectRows(Added_Datetime_End_Action, each ([Scheduled Activity] <> "Break" and [Scheduled Activity] <> "Lunch")),

    Filter_Original_Status = Table.SelectRows(Removed_Break_Lunch, each [Scheduled Activity] = "Open Time" or Text.Contains([Scheduled Activity], "Training")),
    Original_Shift_Grouped = Table.Group(
        Filter_Original_Status,
        {"Date", "ID"},
        {
            {"Original_Datetime_Start_Shift", each List.Min([Datetime_Start_Action]), type datetime},
            {"Original_Datetime_End_Shift", each List.Max([Datetime_End_Action]), type datetime}
        }
    ),
    Added_Original_Start_Shift = Table.AddColumn(Original_Shift_Grouped, "Original_Start_Shift", each Time.From([Original_Datetime_Start_Shift]), type time),
    Added_Original_End_Shift = Table.AddColumn(Added_Original_Start_Shift, "Original_End_Shift", each Time.From([Original_Datetime_End_Shift]), type time),
    Added_Shift_Column = Table.AddColumn(
        Added_Original_End_Shift,
        "Original_Shift",
        each 
            let 
                startShift = [Original_Start_Shift],
                endShift = [Original_End_Shift],
                startShiftText = 
                    if startShift <> null and startShift <> "Off" then
                        let 
                            startShiftTime = Time.From(startShift),
                            startHour = Time.Hour(startShiftTime),
                            startMinute = Time.Minute(startShiftTime)
                        in
                            Text.PadStart(Text.From(startHour), 2, "0") & Text.PadStart(Text.From(startMinute), 2, "0")
                    else
                        "Off",
                endShiftText = 
                    if endShift <> null and endShift <> "Off" then
                        let 
                            endShiftTime = Time.From(endShift),
                            endHour = Time.Hour(endShiftTime),
                            endMinute = Time.Minute(endShiftTime)
                        in
                            Text.PadStart(Text.From(endHour), 2, "0") & Text.PadStart(Text.From(endMinute), 2, "0")
                    else
                        "Off"
            in
                if startShift <> null and startShift <> "Off" then
                    startShiftText & "-" & endShiftText
                else
                    startShiftText,
        type text
    ),
    Merged_Original_Shift = Table.NestedJoin(Added_Datetime_End_Action, {"Date", "ID"}, Added_Shift_Column, {"Date", "ID"}, "Original_Shift", JoinKind.LeftOuter),
    Expanded_Original_Shift = Table.ExpandTableColumn(Merged_Original_Shift, "Original_Shift", {"Original_Datetime_Start_Shift", "Original_Datetime_End_Shift","Original_Start_Shift", "Original_End_Shift", "Original_Shift"}, {"Original_Datetime_Start_Shift", "Original_Datetime_End_Shift", "Original_Start_Shift", "Original_End_Shift","Original_Shift"}),

    First_Shift_Grouped = Table.Group(
        Removed_Break_Lunch,
        {"Date", "ID"},
        {
            {"First_Scheduled_Activity", each List.First([Scheduled Activity]), type text},
            {"First_Datetime_Start_Shift", each List.Min([Datetime_Start_Action]), type datetime},
            {"First_Datetime_End_Shift", each List.Max([Datetime_End_Action]), type datetime}
        }
    ),
    Added_First_Start_Shift = Table.AddColumn(First_Shift_Grouped, "First_Start_Shift", each Time.From([First_Datetime_Start_Shift]), type time),
    Added_First_End_Shift = Table.AddColumn(Added_First_Start_Shift, "First_End_Shift", each Time.From([First_Datetime_End_Shift]), type time),
    Added_First_Shift_Column = Table.AddColumn(Added_First_End_Shift, "First_Shift",
        each 
            let 
                startShift = [First_Start_Shift],
                endShift = [First_End_Shift],
                firstScheduledActivity = [First_Scheduled_Activity],
                startShiftText = 
                    if startShift <> null and startShift <> "Off" then
                        let 
                            startShiftTime = Time.From(startShift),
                            startHour = Time.Hour(startShiftTime),
                            startMinute = Time.Minute(startShiftTime)
                        in
                            Text.PadStart(Text.From(startHour), 2, "0") & Text.PadStart(Text.From(startMinute), 2, "0")
                    else
                        "Off",
                endShiftText = 
                    if endShift <> null and endShift <> "Off" then
                        let 
                            endShiftTime = Time.From(endShift),
                            endHour = Time.Hour(endShiftTime),
                            endMinute = Time.Minute(endShiftTime)
                        in
                            Text.PadStart(Text.From(endHour), 2, "0") & Text.PadStart(Text.From(endMinute), 2, "0")
                    else
                        "Off"
            in
                if firstScheduledActivity = "PTO" then
                    "AL"
                else if startShift <> null and startShift <> "Off" then
                    startShiftText & "-" & endShiftText
                else
                    startShiftText,
        type text
    ),
    Merged_First_Shift = Table.NestedJoin(Expanded_Original_Shift, {"Date", "ID"}, Added_First_Shift_Column, {"Date", "ID"}, "First_Shift", JoinKind.LeftOuter),
    Expanded_First_Shift = Table.ExpandTableColumn(Merged_First_Shift, "First_Shift", {"First_Scheduled_Activity","First_Datetime_Start_Shift", "First_Datetime_End_Shift","First_Start_Shift", "First_End_Shift", "First_Shift"}, {"First_Scheduled_Activity","First_Datetime_Start_Shift", "First_Datetime_End_Shift", "First_Start_Shift", "First_End_Shift","First_Shift"}),

    Filter_Extend_Status = Table.SelectRows(Removed_Break_Lunch, each [Scheduled Activity] = "Open Time" or Text.Contains([Scheduled Activity], "Training") or [Scheduled Activity] = "Extra Hours"),
    Extend_Shift_Grouped = Table.Group(
        Filter_Extend_Status,
        {"Date", "ID"},
        {
            {"Extend_Datetime_Start_Shift", each List.Min([Datetime_Start_Action]), type datetime},
            {"Extend_Datetime_End_Shift", each List.Max([Datetime_End_Action]), type datetime}
        }
    ),
    Added_Extend_Start_Shift = Table.AddColumn(Extend_Shift_Grouped, "Extend_Start_Shift", each Time.From([Extend_Datetime_Start_Shift]), type time),
    Added_Extend_End_Shift = Table.AddColumn(Added_Extend_Start_Shift, "Extend_End_Shift", each Time.From([Extend_Datetime_End_Shift]), type time),
    Added_Extend_Shift_Column = Table.AddColumn(
        Added_Extend_End_Shift,
        "Extend_Shift",
        each 
            let 
                startShift = [Extend_Start_Shift],
                endShift = [Extend_End_Shift],
                startShiftText = 
                    if startShift <> null and startShift <> "Off" then
                        let 
                            startShiftTime = Time.From(startShift),
                            startHour = Time.Hour(startShiftTime),
                            startMinute = Time.Minute(startShiftTime)
                        in
                            Text.PadStart(Text.From(startHour), 2, "0") & Text.PadStart(Text.From(startMinute), 2, "0")
                    else
                        "Off",
                endShiftText = 
                    if endShift <> null and endShift <> "Off" then
                        let 
                            endShiftTime = Time.From(endShift),
                            endHour = Time.Hour(endShiftTime),
                            endMinute = Time.Minute(endShiftTime)
                        in
                            Text.PadStart(Text.From(endHour), 2, "0") & Text.PadStart(Text.From(endMinute), 2, "0")
                    else
                        "Off"
            in
                if startShift <> null and startShift <> "Off" then
                    startShiftText & "-" & endShiftText
                else
                    startShiftText,
        type text
    ),

    Merged_Extend_Shift = Table.NestedJoin(Expanded_First_Shift, {"Date", "ID"}, Added_Extend_Shift_Column, {"Date", "ID"}, "Extend_Table", JoinKind.LeftOuter),
    Expanded_Extend_Table = Table.ExpandTableColumn(Merged_Extend_Shift, "Extend_Table", {"Extend_Datetime_Start_Shift", "Extend_Datetime_End_Shift", "Extend_Start_Shift","Extend_End_Shift","Extend_Shift"}, {"Extend_Datetime_Start_Shift", "Extend_Datetime_End_Shift", "Extend_Start_Shift","Extend_End_Shift","Extend_Shift"}),
    Added_Open_Time_Column = Table.AddColumn(
        Expanded_Extend_Table,
        "Open Time",
        each if Text.Contains([Scheduled Activity], "Open Time") then
            Duration.TotalSeconds([Datetime_End_Action] - [Datetime_Start_Action])
        else
            null,
        type number
    ),
    Added_OT_Time_Column = Table.AddColumn(
        Added_Open_Time_Column,
        "OT",
        each if Text.Contains([Scheduled Activity], "Extra Hours") then
            Duration.TotalSeconds([Datetime_End_Action] - [Datetime_Start_Action])
        else
            null,
        type number
    ),
    Added_OT_Range = Table.AddColumn(Added_OT_Time_Column, "OT Range",
        each 
            if [Original_Shift] = null and Text.Contains([Scheduled Activity], "Extra Hours") then
                [Extend_Shift]
            else if [Original_Shift] <> null and Text.Contains([Scheduled Activity], "Extra Hours") then
                let 
                    startAct = [Start_Action],
                    endAct = [End_Action],
                    startShiftText = 
                        if startAct <> null and startAct <> "Off" then
                            let 
                                startShiftTime = Time.From(startAct),
                                startHour = Time.Hour(startShiftTime),
                                startMinute = Time.Minute(startShiftTime)
                            in
                                Text.PadStart(Text.From(startHour), 2, "0") & Text.PadStart(Text.From(startMinute), 2, "0")
                        else
                            null,
                    endShiftText = 
                        if endAct <> null and endAct <> "Off" then
                            let 
                                endShiftTime = Time.From(endAct),
                                endHour = Time.Hour(endShiftTime),
                                endMinute = Time.Minute(endShiftTime)
                            in
                                Text.PadStart(Text.From(endHour), 2, "0") & Text.PadStart(Text.From(endMinute), 2, "0")
                        else
                            null
                in
                    if startShiftText <> null and endShiftText <> null then
                        startShiftText & "-" & endShiftText
                    else if startShiftText <> null then
                        startShiftText
                    else
                        null
            else
                null,
        type text),
    #"Removed Other Columns2" = Table.SelectColumns(Added_OT_Range,{"Date", "Scheduled Activity", "Slot", "Prefixed Activity", "Year", "Month", "Week Begin", "Date Start Month", "Date End Month", "Date Start Week", "Date End Week", "Week", "Day", "OracleID", "People ID", "IEX ID", "Employee Name", "Alias Name", "Designation", "LOB", "Supervisor Name", "Email Id", "Wave", "Detail Status", "Tenure", "LOB_2", "Datetime_Start_Shift", "Datetime_End_Shift", "Datetime_Start_Action", "Datetime_End_Action", "Original_Datetime_Start_Shift", "Original_Datetime_End_Shift", "Original_Start_Shift", "Original_End_Shift", "Original_Shift", "First_Scheduled_Activity", "First_Datetime_Start_Shift", "First_Datetime_End_Shift", "First_Start_Shift", "First_End_Shift", "First_Shift", "Extend_Datetime_Start_Shift", "Extend_Datetime_End_Shift", "Extend_Start_Shift", "Extend_End_Shift", "Extend_Shift", "Open Time", "OT", "OT Range"}),
    Added_OT_Type = Table.AddColumn(
        #"Removed Other Columns2",
        "OT Type",
        each if Text.Contains([Scheduled Activity], "Extra Hours") then
            if [Original_Datetime_Start_Shift] = [Extend_Datetime_Start_Shift] and [Original_Datetime_End_Shift] <> [Extend_Datetime_End_Shift] then "OT - Post Shift"
            else if [Original_Datetime_Start_Shift] <> [Extend_Datetime_Start_Shift] and [Original_Datetime_End_Shift] = [Extend_Datetime_End_Shift] then "OT - Pre Shift"
            else if [Original_Shift] = null and [OT] > 0 then "OT - PO"
            else if [Original_Datetime_Start_Shift] <> [Extend_Datetime_Start_Shift] and [Original_Datetime_End_Shift] <> [Extend_Datetime_End_Shift] then "OT - Pre/Post Shift"
            else if [Original_Datetime_Start_Shift] = [Extend_Datetime_Start_Shift] and [Original_Datetime_End_Shift] = [Extend_Datetime_End_Shift] then "No OT"
            else null
        else null),
    Added_OT_Day_Type = Table.AddColumn(
        Added_OT_Type,
        "OT Day Type",
        each if Text.Contains([Scheduled Activity], "Extra Hours") then
            if [Original_Shift] <> null and [OT] > 0 then "OT"
            else if [Original_Shift] = null and [OT] > 0 then "PO"
            else "No OT"
        else null),
    Added_OT_Pre_Shift_Time = Table.AddColumn(
        Added_OT_Day_Type,
        "OT Preshift Hours",
        each if Text.Contains([Scheduled Activity], "Extra Hours") and [Datetime_Start_Action] < [Original_Datetime_Start_Shift] then
            Duration.TotalSeconds([Datetime_End_Action] - [Datetime_Start_Action])
        else 0, type number),
    Added_OT_Post_Shift_Time = Table.AddColumn(
        Added_OT_Pre_Shift_Time,
        "OT Postshift Hours",
        each if Text.Contains([Scheduled Activity], "Extra Hours") and [Datetime_End_Action] > [Original_Datetime_End_Shift] then 
            Duration.TotalSeconds([Datetime_End_Action] - [Datetime_Start_Action]) 
        else 0, type number),
    Added_Night_Shift = 
        Table.AddColumn(
            Added_OT_Post_Shift_Time,
            "Night_Shift",
            each if [Original_Datetime_Start_Shift] <> null then
                    if Time.From([Original_Datetime_Start_Shift]) >= #time(18, 0, 0) then 1 else 0
                else 0 , type number),
    Added_Night_Shift_with_Original_Shift = 
        Table.AddColumn(
            Added_Night_Shift,
            "Original_Shift_2",
            each 
                if [Original_Datetime_Start_Shift] = null then
                    if Text.Contains([Scheduled Activity], "Off") then "Off"
                    else if Text.Contains([Scheduled Activity], "Holiday") then "Holiday"
                    else if Text.Contains([Scheduled Activity], "PTO") then "AL"
                    else null
                else [Original_Shift],
            type text
        ),
    Added_Shift = Table.AddColumn(Added_Night_Shift_with_Original_Shift, "Shift", each 
        if [First_Scheduled_Activity] = "No Call/No Show" and [Original Shift] <> null then "HDL"
        else if [First_Scheduled_Activity] = "No Call/No Show" and [Original Shift] = null then "Leave"  
        else if [First_Scheduled_Activity] = "Open Time" or [First_Scheduled_Activity] = "Training" or [First_Scheduled_Activity] = "Nesting Training" or [First_Scheduled_Activity] = "Training Offline" or [First_Scheduled_Activity] = "Extra Hours" or [First_Scheduled_Activity] = "Off" then [First_Shift]
        else if [First_Scheduled_Activity] = "PTO" then "AL" 
        else [First_Scheduled_Activity]),
    Added_Duration_Column = Table.AddColumn(
        Added_Shift, 
        "Duration", 
        each Duration.TotalSeconds([Datetime_End_Action] - [Datetime_Start_Action]),
        type number
    ),
    Added_Expanded_Shift = Table.AddColumn(
        Added_Duration_Column, 
        "Expanded_Shift", 
        each 
            if [First_Scheduled_Activity] = "Training Offline" 
                or [First_Scheduled_Activity] = "Nesting Training"
                or [First_Scheduled_Activity] = "Open Time"
                or [First_Scheduled_Activity] = "Training" then [First_Shift]
            else if [First_Scheduled_Activity] = "No Call/No Show" and [Open Time] = null then "UPL"
            else if [First_Scheduled_Activity] = "No Call/No Show" and [Open Time] > 0 then [Extend_Shift]
            else if [First_Scheduled_Activity] = "Extra Hours" then 
                if [Open Time] = null 
                    then "PO" 
                else if [Open Time] > 0 
                    then [Extend_Shift]
                else null
            else if [First_Scheduled_Activity] = "Holiday" 
                or [First_Scheduled_Activity] = "Bereavement" 
                or [First_Scheduled_Activity] = "Off" 
                or [First_Scheduled_Activity] = "Off Phone Misc" 
                or [First_Scheduled_Activity] = "Termination" 
                or [First_Scheduled_Activity] = "Unscheduled" 
                then [First_Scheduled_Activity]
            else if [First_Scheduled_Activity] = "PTO" then "AL"
            else if [First_Scheduled_Activity] = "Sickness" then "SL"
            else null,
        type text
    ),
    #"Removed Other Columns3" = Table.SelectColumns(Added_Expanded_Shift,{"Date", "Scheduled Activity", "Slot", "Prefixed Activity", "Year", "Month", "Week Begin", "Date Start Month", "Date End Month", "Date Start Week", "Date End Week", "Week", "Day", "OracleID", "People ID", "IEX ID", "Employee Name", "Alias Name", "Designation", "LOB", "Supervisor Name", "Email Id", "Wave", "Detail Status", "Tenure", "LOB_2", "Datetime_Start_Shift", "Datetime_End_Shift", "Datetime_Start_Action", "Datetime_End_Action", "Original_Datetime_Start_Shift", "Original_Datetime_End_Shift", "Original_Start_Shift", "Original_End_Shift", "First_Scheduled_Activity", "First_Datetime_Start_Shift", "First_Datetime_End_Shift", "First_Start_Shift", "First_End_Shift", "First_Shift", "Extend_Datetime_Start_Shift", "Extend_Datetime_End_Shift", "Extend_Start_Shift", "Extend_End_Shift", "Extend_Shift", "Open Time", "OT", "OT Range", "OT Type", "OT Day Type", "OT Preshift Hours", "OT Postshift Hours", "Night_Shift", "Original_Shift_2", "Shift","Expanded_Shift", "Duration"}),
    #"Renamed Columns2" = Table.RenameColumns(#"Removed Other Columns3",{{"Original_Shift_2", "Original_Shift"}}),
    #"Reordered Columns3" = Table.ReorderColumns(#"Renamed Columns2",{"Year", "Month", "Week Begin", "Date Start Month", "Date End Month", "Date Start Week", "Date End Week", "Week", "Day", "OracleID", "IEX ID", "People ID", "Employee Name", "Email Id", "Alias Name", "Wave", "Supervisor Name", "Designation", "LOB", "LOB_2", "Detail Status", "Tenure", "Date", "Scheduled Activity", "Prefixed Activity","Duration", "Slot", "Datetime_Start_Shift", "Datetime_End_Shift", "Datetime_Start_Action", "Datetime_End_Action", "Original_Datetime_Start_Shift", "Original_Datetime_End_Shift", "Original_Start_Shift", "Original_End_Shift", "Original_Shift", "First_Datetime_Start_Shift", "First_Datetime_End_Shift", "First_Start_Shift", "First_End_Shift", "First_Shift", "Extend_Datetime_Start_Shift", "Extend_Datetime_End_Shift", "Extend_Start_Shift", "Extend_End_Shift", "Extend_Shift", "Night_Shift", "OT Range", "Open Time", "OT Day Type", "OT", "OT Type", "OT Preshift Hours", "OT Postshift Hours", "Shift","Expanded_Shift"}),
    Final_Table = Table.Buffer(#"Reordered Columns3")
in
    Final_Table
