let
    Source = Excel.CurrentWorkbook(){[Name="Activity_Rawdata"]}[Content],
    Changed_Activity = Table.TransformColumnTypes(Source,{{"Agent Email", type text}, {"Supervisor Email", type text}, {"Agent State", type text}, {"Start Time", type datetime}, {"End Time", type datetime}, {"Total Time in seconds", type number}, {"Queue Name", type any}, {"Conversation Handled", type text}, {"Ring Time in seconds", type any}, {"Talk Time in seconds", type any}, {"Hold Time in seconds", type any}, {"Wrap-up Time in seconds", type any}, {"Transfer Type", type any}, {"Transfer Reason", type any}, {"Agent Business Location", type text}}),
    #"Removed Duplicates" = Table.Distinct(Changed_Activity, {"Agent Email", "Agent State", "Start Time", "End Time", "Total Time in seconds"}),
    AddedCustom_Date = Table.AddColumn(#"Removed Duplicates", "Date", each Date.From([Start Time]), type date),
    Merged_HC = Table.NestedJoin(AddedCustom_Date, {"Date","Agent Email"},HC_Extend, {"Date","Email Id"},"HC", JoinKind.LeftOuter),
    #"Expanded HC" = Table.ExpandTableColumn(Merged_HC, "HC", {"LOB", "Night_Shift"}, {"LOB", "Night_Shift"}),
    #"Filtered Rows" = Table.SelectRows(#"Expanded HC", each ([End Time] <> null) and ([Agent State] <> "End of Shift-ACTIVE" and [Agent State] <> "End of Shift-IDLE" and [Agent State] <> "Log out-ACTIVE" and [Agent State] <> "Log out-IDLE")),
    Agent_Activity_Temp = Table.AddColumn(
        #"Filtered Rows",
        "Previous_Date",
        each Date.AddDays([Date], -1), type date
    ),
    Merge_table_with_Schedule_previous_day = Table.NestedJoin(
        Agent_Activity_Temp,
        {"Agent Email", "Previous_Date"},
        Roster,
        {"Email", "Scheduled_Date"},"Shift_Table", JoinKind.RightOuter
    ),
    Expanded_Shift_2 = Table.ExpandTableColumn(Merge_table_with_Schedule_previous_day, "Shift_Table", {"First Start Shift"}, {"Previous_Start_Shift"}),
    AddedCustomNight_Shift_2_Check = Table.AddColumn(
        Expanded_Shift_2,
        "Night_Shift_2_Check",
        each if 
            [Night_Shift] = 0 and 
            Time.From([Start Time]) < #time(18, 0, 0) and
            Time.From([Start Time]) >= #time(0, 0, 0) and
            Time.From([Previous_Start_Shift]) <= #time(23, 59, 0) and
            Time.From([Previous_Start_Shift]) >= #time(15, 0, 0)
        then false else true
    ),
    UpdatedNight_Shift = Table.ReplaceValue(
        AddedCustomNight_Shift_2_Check, 
        each [Night_Shift], 
        each if [Night_Shift_2_Check] = false 
        then 1 else [Night_Shift], Replacer.ReplaceValue,{"Night_Shift"}),

    AddedCustom_Date_Converted = Table.AddColumn(
        UpdatedNight_Shift,
        "Date_Converted",
        each 
            let
                startTime = Time.Hour([Start Time]),
                nightShift = [Night_Shift],
                date = [Date],
                nightShiftStart = 0,
                nightShiftEnd = 0,
                newDate =
                    if startTime >= 0 and startTime < 12 and nightShift = 1 then 
                        Date.AddDays(date, -1)
                    else if startTime >= 0 and startTime < 18 and nightShift = 0 then 
                        date
                    else if startTime >= 18 and nightShift = 1 then 
                        date
                    else 
                        date
            in
                newDate, type date
    ),
    #"Removed Columns" = Table.RemoveColumns(AddedCustom_Date_Converted,{"LOB", "Night_Shift", "Previous_Date", "Previous_Start_Shift", "Night_Shift_2_Check", "Date", "Queue Name", "Ring Time in seconds", "Talk Time in seconds", "Hold Time in seconds", "Wrap-up Time in seconds", "Transfer Type", "Transfer Reason", "Agent Business Location", "Supervisor Email"}),
    Merged_HC_Round_2 = Table.NestedJoin(#"Removed Columns", {"Date_Converted","Agent Email"}, HC_Extend, {"Date","Email Id"},"HC", JoinKind.RightOuter),
    #"Expanded HC1" = Table.ExpandTableColumn(Merged_HC_Round_2, "HC", {"Year", "Month", "Week Begin", "Week", "Day", "Date", "OracleID", "People ID", "IEX ID", "Employee Name", "Alias Name", "Gender", "Designation", "LOB", "Supervisor Name", "Email Id", "Wave", "Detail Status", "NL Tenure","LG Tenure", "Status", "LOB_2", "First Shift", "Shift", "Datetime_Start_Shift", "Datetime_End_Shift", "Night_Shift", "Target_Prod"}, {"Year", "Month", "Week Begin", "Week", "Day", "Date", "OracleID", "People ID", "IEX ID", "Employee Name", "Alias Name", "Gender", "Designation", "LOB", "Supervisor Name", "Email Id", "Wave", "Detail Status", "NL Tenure","LG Tenure", "Status", "LOB_2", "First Shift", "Shift", "Datetime_Start_Shift", "Datetime_End_Shift", "Night_Shift", "Target_Prod"}),
    AddCustom_Time = Table.AddColumn(#"Expanded HC1", "Start Time (hours)", each Time.From([Start Time]), type time),
    AddSlot_VNT = Table.AddColumn(AddCustom_Time, "Slot (VNT)", each 
        let
            hour = Time.Hour([Start Time]),
            minute = Time.Minute([Start Time]),
            slotMinute = if minute >= 30 then "30" else "00"
        in
            Text.From(hour) & ":" & slotMinute
    ),
    AddedBreakCount = Table.AddColumn(AddSlot_VNT, "Break_Check", each if [Agent State] = "Break-IDLE" then 1 else 0, type number),
    Sum = Table.Group(
        AddedBreakCount,
        {"Year", "Month", "Week Begin", "Week", "Day", "Date", "OracleID", "People ID", "IEX ID", "Employee Name","Email Id", "Alias Name", "Gender", "Designation", "LOB", "Supervisor Name", "Wave", "Detail Status", "NL Tenure","LG Tenure", "LOB_2","Status","First Shift", "Shift", "Datetime_Start_Shift", "Datetime_End_Shift", "Night_Shift", "Target_Prod"},
        {   
            {"Start Time", each List.Min([Start Time]), type datetime},
            {"End Time", each List.Max([End Time]), type datetime},
            {"Min", each List.Min([Start Time]), type datetime},
            {"Total Time in seconds", each List.Sum([Total Time in seconds])/3600, type number},
            {"Chat", each List.Count(List.Distinct(List.RemoveNulls([Conversation Handled]))), type number},
            {"Total Time Chat Handled", each List.Sum(Table.SelectRows(_, each [Conversation Handled] <> null)[Total Time in seconds]), type number},
            {"SUM Productive", each List.Sum(Table.SelectRows(_, each [Agent State] = "Ready-IDLE" or Text.Contains([Agent State], "ACTIVE"))[Total Time in seconds]), type number},
            {"Break_Count", each List.Sum([Break_Check]), type number},
            {"Break", each List.Sum(Table.SelectRows(_, each [Agent State] = "Break-IDLE")[Total Time in seconds]), type number},
            {"Lunch", each List.Sum(Table.SelectRows(_, each [Agent State] = "Lunch-IDLE")[Total Time in seconds]), type number},
            {"Outbound-IDLE", each List.Sum(Table.SelectRows(_, each [Agent State] = "Outbound Call-IDLE")[Total Time in seconds]), type number}
        }
    ),

    Added_Over_Break = Table.AddColumn(
        Sum,
        "over_break",
        each 
            if [Break] = null then 0
            else if Text.Contains([Detail Status], "Production") then 
                if ([Break] - 30*60) < 0 then 0 else ([Break] - 30*60)
            else if Text.Contains([Detail Status], "Nesting") then 
                if ([Break] - 30*60) < 0 then 0 else ([Break] - 15*60)
            else 0,
        type number
    ),
    Added_Over_Lunch = Table.AddColumn(
        Added_Over_Break,
        "over_lunch",
        each 
            if [Lunch] = null then 0
            else if ([Lunch] - 60*60) < 0 then 0 
            else ([Lunch] - 60*60),
        type number
    ),
    Added_Exceed_Break = Table.AddColumn(
        Added_Over_Lunch,
        "exceed_break",
        each 
            if Text.Contains([Detail Status], "Production") then 
                if ([Break_Count] - 2) <= 0 then 0 else ([Break_Count] - 2)
            else if Text.Contains([Detail Status], "Nesting") then 
                if ([Break_Count] - 2) <= 0 then 0 else ([Break_Count] - 2)
            else 0,
        type number
    ),
    All_in_one = Table.Group(
        Added_Exceed_Break,
        {"Year", "Month", "Week Begin", "Week", "Day", "Date", "OracleID", "People ID", "IEX ID", "Employee Name","Email Id", "Alias Name", "Gender", "Designation", "LOB", "Supervisor Name", "Wave", "Detail Status", "NL Tenure","LG Tenure", "LOB_2","Status","First Shift","Shift", "Datetime_Start_Shift", "Datetime_End_Shift", "Night_Shift", "Target_Prod","Start Time","End Time","Min","Total Time in seconds","Chat","Total Time Chat Handled","SUM Productive","Outbound-IDLE"},
        {
            {"Break", each List.Max([Break]), type number},
            {"Lunch", each List.Max([Lunch]), type number},
            {"over_break", each List.Max([over_break]), type number},
            {"over_lunch", each List.Max([over_lunch]), type number},
            {"exceed_break", each List.Max([exceed_break]), type number}
        }
    ),
    add_duration = Table.AddColumn(
        All_in_one,
        "Duration",
        each (Duration.TotalSeconds([End Time] - [Start Time])) /3600,
        type number
    ),
    add_full_day = Table.AddColumn(
        add_duration,
        "Full_Day",
        each 
            if [Duration] = null then "Leave" 
            else 
                if [NL Tenure] = "Nesting" or [LG Tenure] = "Nesting" then 
                    if [Duration] >= 3 then "Full Day" 
                    else if [Duration] > 1 and [Duration] < 3 then "Half Day" 
                    else "Leave"
                else 
                    if [Duration] >= 6 then "Full Day" 
                    else if [Duration] > 1 and [Duration] < 6 then "Half Day" 
                    else "Leave",
        type text
    ),
    Added_HC_Schedule = Table.AddColumn(
         add_full_day, 
        "HC Schedule", 
        each if Text.Contains([First Shift], "-") or [First Shift] = "AL" then 1 else 0, 
        type number
    ),
    Added_HC_Actual = Table.AddColumn(
        Added_HC_Schedule,
        "HC Actual",
        each if [Full_Day] = "Half Day" then 0.5 
            else if [Full_Day] = "Full Day" then 1
            else if [Full_Day] = "Leave" then 0  
            else 0,
        type number
    ),
    #"Added Custom" = Table.AddColumn(Added_HC_Actual, "TOSS", each if [Full_Day] = "Full Day" then [Datetime_Start_Shift] 
        else if [Full_Day] = "Half Day" and [Min] >= [Datetime_Start_Shift] + #duration(0,3,0,0) then [Datetime_Start_Shift] + #duration(0,5,0,0)
        else [Datetime_Start_Shift]),
    #"Removed Columns2" = Table.RemoveColumns(#"Added Custom",{"Datetime_Start_Shift"}),
    #"Renamed Columns" = Table.RenameColumns(#"Removed Columns2",{{"TOSS", "Datetime_Start_Shift"}}),
    add_timelate = Table.AddColumn(#"Renamed Columns", "Time_Late", each 
        let
        timeDifference = [Min] - [Datetime_Start_Shift],
        totalSeconds = Duration.TotalSeconds(timeDifference)
    in
        if [Full_Day] = "Half Day" then
            if [Min] <> null and totalSeconds <> 0 then
                totalSeconds
            else
                0
        else
            if [Min] >= [Datetime_Start_Shift] and [Min] <> null and totalSeconds <> 0 then
                totalSeconds
            else
                0,
    type number
    ),
    add_timeleave = Table.AddColumn(add_timelate, "Time_Leave", each 
        let
            timeDifference = [End Time] - [Datetime_End_Shift],
            totalSeconds = Duration.TotalSeconds(timeDifference)
        in
            if [End Time] >= [Datetime_End_Shift] and [End Time] <> null and totalSeconds <> 0 then
                totalSeconds
            else
                null,
        type number
    ),
    AddLateness = Table.AddColumn(
        add_timeleave,
        "Lateness",
        each if [Time_Late] <> null and [Time_Late] <> 0 then 1 else null,
        type number
    ),
    AddTimeOfDay = Table.AddColumn(AddLateness, "Time Of Day", each if ([LG Tenure] <> "Nesting" or [NL Tenure] = "Nesting") and [Full_Day] = "Full Day" then 7.5
            else if ([LG Tenure] <> "Nesting" or [NL Tenure] = "Nesting") and [Full_Day] = "Half Day" then 3.75
            else if ([LG Tenure] <> "Nesting" or [NL Tenure] = "Nesting") and [Full_Day] = "Full Day" then 7.5
            else if ([LG Tenure] <> "Nesting" or [NL Tenure] = "Nesting") and [Full_Day] = "Half Day" then 3.75
            else null, type number),
    AddAHT = Table.AddColumn(
        AddTimeOfDay, 
        "AHT",
        each if [Chat] <> 0 then ([Total Time Chat Handled]/60) / [Chat] else null, 
        type number
    ),
    Replace_Error_2 = Table.ReplaceErrorValues(AddAHT, {{"HC Schedule", null},{"HC Actual", null},{"Datetime_Start_Shift", null},{"Datetime_End_Shift", null},{"Time_Late", null},{"Time_Leave", null},{"Lateness", 0}}),
    AddNonAdherenceTime = Table.AddColumn(
        Replace_Error_2,
        "Adherence Time",
        each ([Time Of Day]*3600 - [Time_Late] - [over_break] - [over_lunch]),
        type number
    ),
    UpdateTargetProd = Table.AddColumn(
        AddNonAdherenceTime,
        "Open Time", each if [SUM Productive] = 0 or [SUM Productive] = null then null else [Target_Prod], type number
    ),
    Merged_Pull_Out = Table.NestedJoin(UpdateTargetProd, {"Date","IEX ID"}, Pull_Out, {"Date","IEX"},"Pull Out", JoinKind.LeftOuter),
    #"Expanded Pull Out" = Table.ExpandTableColumn(Merged_Pull_Out, "Pull Out", {"Total Time Pull Out"}, {"Total Time Pull Out"}),
    Added_Missed_Hours = Table.AddColumn(#"Expanded Pull Out", "Missed Hours", each 
    if [HC Actual] = 1 
    then ([SUM Productive]/3600) + [Total Time Pull Out] - 7.5 
    else if [HC Actual] = 0.5 
    then ([SUM Productive]/3600) + [Total Time Pull Out] - 3.75 
    else null, 
    type number),
    Added_HC_Planned = Table.AddColumn(Added_Missed_Hours, "HC Planned", each if [First Shift] = "AL" then 1 else if [First Shift] = "HAL" then 0.5 else 0, type number),
    Added_HC_Unplanned = Table.AddColumn(Added_HC_Planned, "HC Unplanned", each 
        if Text.Contains([First Shift], "-") then 
            if [First Shift] <> null and [Shift] = null then 1
            else if [First Shift] <> null and [Full_Day] = "Half Day" then 0.5
            else 0 
        else 0, type number),
    #"Removed Columns3" = Table.RemoveColumns(Added_HC_Unplanned,{"Target_Prod"}),
    #"Reordered Columns" = Table.ReorderColumns(#"Removed Columns3",{"Year", "Month", "Week Begin", "Week", "Day", "Date", "OracleID", "People ID", "IEX ID",  "Employee Name", "Alias Name", "Designation", "LOB", "LOB_2", "Supervisor Name", "Email Id", "Wave", "Full_Day", "Detail Status", "NL Tenure","LG Tenure", "Status", "Night_Shift", "Gender", "Datetime_Start_Shift", "Datetime_End_Shift", "First Shift", "Shift", "Start Time", "End Time", "Duration", "Total Time in seconds","SUM Productive","Chat", "Total Time Chat Handled","Missed Hours", "Total Time Pull Out",  "AHT", "Min", "Time_Late", "Time_Leave", "Lateness", "Open Time", "Break", "Lunch", "Outbound-IDLE", "over_break", "over_lunch", "exceed_break", "Adherence Time", "Time Of Day", "HC Actual", "HC Schedule", "HC Planned", "HC Unplanned"}),
    Activity_final = Table.Buffer(#"Reordered Columns")
in
    Activity_final
